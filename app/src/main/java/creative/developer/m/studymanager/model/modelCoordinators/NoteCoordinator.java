/*
###############################################################################
Author: Mohammed Alghamdi
Class name : NoteCoordinator
purpose: This is a model class that coordinates all model classes that are used by notes,
  so that view model need to interact only with this class. It has an access
  to both versions of the notes(the database and the cashed notes).
Methods:
    getInstance() -> returns the only instance of this class. This class implements Singleton.
    getLessonsList(course) -> returns the lessons that belongs to the given course.
    getLessonNote(course, lesson) -> returns the note of the given lesson and course.
    addNote() -> it adds the note to the database and the notesList.
    updateNote() -> it updates the note on the database and the notesList.
    removenote() -> it remove the note from the database and the notesList.

Note: the following are used temporarily
    coursesNames -> names of the courses including the ones that do not have a lesson's note. Cashed version.
    addCourse() -> adds the course to the database and courseNames.
    containCourse() -> returns true if the course has been added already.
    getCourses() -> returns Set<string> that contain courses' names.
###############################################################################
 */


package creative.developer.m.studymanager.model.modelCoordinators;

import android.content.Context;

import java.util.List;
import java.util.Observable;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import creative.developer.m.studymanager.model.EntityListFiles.NoteList;
import creative.developer.m.studymanager.model.dbFiles.AppDatabase;
import creative.developer.m.studymanager.model.dbFiles.DataRepository;
import creative.developer.m.studymanager.model.dbFiles.EntityFiles.NoteEntity;

public class NoteCoordinator extends Observable {

    private static NoteCoordinator instance; // this class applies Singleton.
    // When adding a row in the database, the row's id is 1 + lastId, so that ids are generated by
    // this class instead of the database. It would behave like AUTO_INCREMENT.
    private int lastID;
    private NoteList notesList; // cashed notes
    private DataRepository repository;
    private Set<String> coursesNames;


    /*
     * This method retrieve the only instance of this class
     * @param context is the Context's object of the view model class.
     */
    public static NoteCoordinator getInstance(Context context) {
        if (instance == null) {
            instance = new NoteCoordinator(context);
        }
        return instance;
    }


    /*
    * It constructs the only object of this class
    * @param context is the Context's object of the view model class.
    */
    private NoteCoordinator(Context context) {
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> {
            repository = DataRepository.getInstance(AppDatabase.getInstance(context));
            notesList = new NoteList(repository.getNotes(context));
            lastID = notesList.getLastID();
            coursesNames = repository.getCoursesStr();
            NoteCoordinator.this.setChanged();
            NoteCoordinator.this.notifyObservers();
        });
    }


    /*
    * It returns the list of lessons' string for the given course.
    * @param course is the string of the course's name
    * @return list of strings for the lessons' name
    */
    public List<String> getLessonsList(String course) {
        return notesList.getLessonsCourse(course);
    }


    /*
    * It returns the lesson object for the given course and lesson names.
    * @param course is the string for the course's name
    * @param lesson is the string for the lesson's name
    */
    public NoteEntity getLessonNote(String course, String lesson) {
        return notesList.getNote(course, lesson);
    }

    /*
    * It adds a note to the database and notesList.
    * @param course is the string for the course's name
    * @param lesson is the string for the lesson's name
    * @param notes is the inputted notes by the user.
    */
    public void addNote(String course, String lesson, String notes) {
        lastID++;
        NoteEntity added = new NoteEntity(lastID, course, lesson, notes);
        notesList.addNote(added);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.addNote(added));
    }

    /*
    * It updates the note object on the database and notesList
    * @param updated is the object version after the modification.
    */
    public void updateNote(NoteEntity updated) {
        notesList.updateNote(updated);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.updateNote(updated));
    }


    /*
    * It removes the note object from the database and notesList
     * @param course is the string for the course's name
     * @param lesson is the string for the lesson's name
    */
    public void removeNote(String course, String lesson) {
        NoteEntity removed = notesList.removeNote(course, lesson);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.deleteNote(removed));
    }


    /*
    * It adds a course to the database and the coursesNames
    * @param courseStr is the course's name as a string
    */
    public void addCourse(String courseStr) {
        coursesNames.add(courseStr);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.addCourse(courseStr));
    }

    /*
    * It returns true if course has been added.
    * @param course is the name of the course.
    */
    public boolean containCourse (String course) {
        return coursesNames.contains(course);
    }

    // this is a getter for the field coursesNames
    public Set<String> getCoursesNames() {return coursesNames;}
}
