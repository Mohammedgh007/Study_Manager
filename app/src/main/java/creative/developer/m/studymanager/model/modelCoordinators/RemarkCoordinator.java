/*
###############################################################################
Author: Mohammed Alghamdi
Class name : RemarkCoordinator
purpose: This is a model class that coordinates all model classes that are used by remarks,
  so that view model need to interact only with this class. It has an access
  to both versions of the remark(the database and the cashed remark).
Methods:
    getInstance() -> returns the only instance of this class. This class implements Singleton.
    getRemark() -> returns the remarks as a  sorted List<> based on the hour and the minute.
    addRemark() -> it adds the remark to the database and the remarksList.
    updateRemark() -> it updates the remark on the database and the remarksList.
    removeRemark() -> it remove the remark from the database and the remarksList
###############################################################################
 */

package creative.developer.m.studymanager.model.modelCoordinators;

import android.content.Context;

import java.util.List;
import java.util.Observable;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import creative.developer.m.studymanager.model.EntityListFiles.RemarksList;
import creative.developer.m.studymanager.model.dbFiles.AppDatabase;
import creative.developer.m.studymanager.model.dbFiles.DataRepository;
import creative.developer.m.studymanager.model.dbFiles.EntityFiles.RemarkEntity;

public class RemarkCoordinator extends Observable {
    // When adding a row in the database, the row's id is 1 + lastId, so that ids are generated by
    // this class instead of the database. It would behave like AUTO_INCREMENT.
    private int lastID;
    private RemarksList remarksList; // cached list
    private DataRepository repository;
    private static RemarkCoordinator instance; // this class uses Singleton.

    /*
    * It creates the only object of this class.
    * @param context is the Context's object of the view model class.
    */
    public RemarkCoordinator(Context context) {
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> {
            repository = DataRepository.getInstance(AppDatabase.getInstance(context));
            System.out.println("finished db");
            remarksList = new RemarksList(repository.getRemarks());
            lastID = remarksList.getLastID();
            RemarkCoordinator.this.setChanged();
            RemarkCoordinator.this.notifyObservers();
        });
    }


    /*
    * This method retrieve the only instance of this class
    * @param context is the Context's object of the view model class.
    */
    public static RemarkCoordinator getInstance(Context context) {
        if (instance == null) {
            instance = new RemarkCoordinator(context);
        }
        return instance;
    }

    /*
    * It returns the remarks as a sorted list.
    */
    public List<RemarkEntity> getRemarks () {
        if (this.remarksList == null) { // to avoid race condition.
            return null;
        } else {
            return remarksList.getRemarksList();
        }
    }

    /*
    * It adds a remark to the database and remarksList
    * @param title is the title of the remark that will be shown to the user.
    * @param disc is the description typed by the user.
    * @param time is the time related to the remark that uses the format "hh:mm" like 14:20
    * @param date is the date related to the remark that uses the format "yyyy:mm;dd
    */
    public void addRemark(String title, String disc, String time, String date) {
        lastID++;
        RemarkEntity added = new RemarkEntity(lastID, title, disc, time, date);
        remarksList.addRemark(added);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.addRemark(added));
    }


    /*
    * It updates the given remark in the database and and remarksList.
    * @param updated is the object version after the update.
    */
    public void updateRemark(RemarkEntity updated) {
        remarksList.updateRemark(updated);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.updateRemark(updated));
    }

    /*
    * It removed the given remark from the database and remarksList
    * @param removed is the object that will be removed
    */
    public void removeRemark(RemarkEntity removed) {
        remarksList.removeRemark(removed);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() ->repository.deleteRemark(removed));
    }
}
