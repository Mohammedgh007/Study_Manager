/*
###############################################################################
Author: Mohammed Alghamdi
Class name : ReminderCoordinator
purpose: This is a model class that coordinates all model classes that are used by reminders,
  so that reminder view and view model need to interact only with this class. It has an access
  to both versions of the reminders(the database and the cashed reminders).
Precondition: getReminderByID() need to be called within another thread.
Methods:
    getInstance() -> returns the only instance of this class. This class implements Singleton.
    getReminders() -> returns the reminders as a list of reminders that's sorted based on adding's dates.
    getreminderByID(id) -> returns the reminder based on the given id.
    addReminder() -> it adds the reminder to the database and the remindersList.
    updateReminder() -> it updates the reminder on the database and the remindersList.
    removeReminder() -> it remove the reminder from the database and the remindersList
###############################################################################
 */

package creative.developer.m.studymanager.model.modelCoordinators;

import android.content.Context;

import java.util.List;
import java.util.Observable;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import creative.developer.m.studymanager.model.EntityListFiles.RemindersList;
import creative.developer.m.studymanager.model.dbFiles.AppDatabase;
import creative.developer.m.studymanager.model.dbFiles.DataRepository;
import creative.developer.m.studymanager.model.dbFiles.EntityFiles.ReminderEntity;

public class ReminderCoordinator extends Observable {

    // When adding a row in the database, the row's id is 1 + lastId, so that ids are generated by
    // this class instead of the database. It would behave like AUTO_INCREMENT.
    private int lastId;
    private RemindersList remindersList; // cached data.
    private static ReminderCoordinator instance = null; // this class implements Singleton design pattern
    private DataRepository repository;

    /*
    * It creates the only version the only object of this class.
    * @param context is the context's object of the modelview class.
    */
    private ReminderCoordinator(Context context) {
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> {
            repository = DataRepository.getInstance(AppDatabase.getInstance(context));
            remindersList = new RemindersList(repository.getAllReminders());
            lastId = remindersList.getLastID();
            ReminderCoordinator.this.setChanged();
            ReminderCoordinator.this.notifyObservers();
        });
    }


    /*
    * It returns the only instance of this class.
    * @param context is the context's object of the modelview class.
    */
    public static ReminderCoordinator getInstance(Context context) {
        if (instance == null){
            instance = new ReminderCoordinator(context);
        }
        return instance;
    }


    /*
    * It returns all the reminders' object as a list.
    */
    public List<ReminderEntity> getReminders() {
        if (remindersList != null)
            return remindersList.getAll(); // to avoid race condition
        else
            return null;
    }


    /*
    * It returns a particular reminder based on the given reminder id.
    * @param id is the reminder id.
    */
    public ReminderEntity getreminderByID(String id) {
        return repository.getReminder(id);
    }


    /*
    * It creates and adds reminder object to the database and remindersList.
    * @param title is the string title given by the user.
    * @param notificationTime is a string whose format is hh:mm like 14:20
    * @param disc is the description given by the user.
    * @param days are the days of reminding that formatted as
    *  first three letters of a day separated by commas like "mon,wed"
    * @param isRepeated determine whether the reminder would be repeated or shown only once.
    * @return the created object.
    */
    public ReminderEntity addReminder(String title, String notificationTime,
                                      String disc, String days, boolean isRepeated) {
        lastId+= 7;
        ReminderEntity added = new
                ReminderEntity(77, title, notificationTime, disc, days, isRepeated);
        remindersList.add(added);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.addReminder(added));
        return added;
    }


    /*
    * It updates the given reminder from the database and remindersList.
    * @Param updated is the updated version of the reminder.
    */
    public void updateReminder(ReminderEntity updated) {
        remindersList.update(updated);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.updateReminder(updated));
    }


    /*
    * It removes the given reminer from the database and remindersList.
    * @param removed is the removed object.
    */
    public void removeReminder(ReminderEntity removed) {
        remindersList.remove(removed);
        Executor executor = Executors.newSingleThreadExecutor();
        executor.execute(() -> repository.deleteReminder(removed));
    }

}
